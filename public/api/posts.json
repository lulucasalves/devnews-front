[
  {
    "id": 1,
    "title": "Creating a Monorepo with Lerna & Yarn Workspaces",
    "date": "12 de março de 2021",
    "subtitle": "In this guide, you will learn how to create a Monorepo to manage multiple packages with a shared build, test, and release process.",
    "body": "React was introduced in May 2013. Its paradigm shift was that your UI was a function of your state. Given some component state, React can determine what your component will look like. React is built upon the idea of state. However, state has long been one of the most difficult parts of building a React application. Let's imagine state management in React as a rugged tool belt. You've used this tool belt for years, slowly adding new tools as needed. Each tool serves a very specific purpose. You don't use your hammer to screw in bolts. As a craftsman, you've learned the right time and place to use each tool. State management with React is a rugged tool belt, but not everyone has the prior experience to know which tool to reach for. This post will explain the past, present, and future of state management to help you make the correct decision for your team, project, or organization. Glossary Before we begin, it's critical you understand some of the terms commonly used. These aren't the canonical names. A few different variations of each float around, but the underlying ideas are the same: UI State – State used for controlling interactive parts of our application (e.g. dark mode toggle, modals). Server Cache State – State from the server, which we cache on the client-side for quick access (e.g. call an API, store the result, use it in multiple places). Form State – The many different states of a form (e.g. loading, submitting, disabled, validation, retrying). There's also controlled & uncontrolled form state. URL State – State managed by the browser (e.g. filter products, saving to query parameters, and refreshing the page to see the same products filtered) State Machine – An explicit model of your state over time (e.g. a stoplight goes from green → yellow → red, but never green → red)."
  },
  {
    "id": 2,
    "title": "How Stripe Designs Beautiful Websites",
    "date": "08 de março de 2021",
    "subtitle": "Examining the tips and tricks used to make Stripe's website design a notch above the rest.",
    "body": "React was introduced in May 2013. Its paradigm shift was that your UI was a function of your state. Given some component state, React can determine what your component will look like. React is built upon the idea of state. However, state has long been one of the most difficult parts of building a React application. Let's imagine state management in React as a rugged tool belt. You've used this tool belt for years, slowly adding new tools as needed. Each tool serves a very specific purpose. You don't use your hammer to screw in bolts. As a craftsman, you've learned the right time and place to use each tool. State management with React is a rugged tool belt, but not everyone has the prior experience to know which tool to reach for. This post will explain the past, present, and future of state management to help you make the correct decision for your team, project, or organization. Glossary Before we begin, it's critical you understand some of the terms commonly used. These aren't the canonical names. A few different variations of each float around, but the underlying ideas are the same: UI State – State used for controlling interactive parts of our application (e.g. dark mode toggle, modals). Server Cache State – State from the server, which we cache on the client-side for quick access (e.g. call an API, store the result, use it in multiple places). Form State – The many different states of a form (e.g. loading, submitting, disabled, validation, retrying). There's also controlled & uncontrolled form state. URL State – State managed by the browser (e.g. filter products, saving to query parameters, and refreshing the page to see the same products filtered) State Machine – An explicit model of your state over time (e.g. a stoplight goes from green → yellow → red, but never green → red)."
  },
  {
    "id": 3,
    "title": "Past, Present, and Future of React State Management",
    "date": "04 de março de 2021",
    "subtitle": "Learn about the history of state management in React and what the preferred solutions are today.",
    "body": "React was introduced in May 2013. Its paradigm shift was that your UI was a function of your state. Given some component state, React can determine what your component will look like. React is built upon the idea of state. However, state has long been one of the most difficult parts of building a React application. Let's imagine state management in React as a rugged tool belt. You've used this tool belt for years, slowly adding new tools as needed. Each tool serves a very specific purpose. You don't use your hammer to screw in bolts. As a craftsman, you've learned the right time and place to use each tool. State management with React is a rugged tool belt, but not everyone has the prior experience to know which tool to reach for. This post will explain the past, present, and future of state management to help you make the correct decision for your team, project, or organization. Glossary Before we begin, it's critical you understand some of the terms commonly used. These aren't the canonical names. A few different variations of each float around, but the underlying ideas are the same: UI State – State used for controlling interactive parts of our application (e.g. dark mode toggle, modals). Server Cache State – State from the server, which we cache on the client-side for quick access (e.g. call an API, store the result, use it in multiple places). Form State – The many different states of a form (e.g. loading, submitting, disabled, validation, retrying). There's also controlled & uncontrolled form state. URL State – State managed by the browser (e.g. filter products, saving to query parameters, and refreshing the page to see the same products filtered) State Machine – An explicit model of your state over time (e.g. a stoplight goes from green → yellow → red, but never green → red)."
  },
  {
    "id": 4,
    "title": "Creating a Monorepo with Lerna & Yarn Workspaces",
    "date": "2 de março de 2021",
    "subtitle": "In this guide, you will learn how to create a Monorepo to manage multiple packages with a shared build, test, and release process.",
    "body": "React was introduced in May 2013. Its paradigm shift was that your UI was a function of your state. Given some component state, React can determine what your component will look like. React is built upon the idea of state. However, state has long been one of the most difficult parts of building a React application. Let's imagine state management in React as a rugged tool belt. You've used this tool belt for years, slowly adding new tools as needed. Each tool serves a very specific purpose. You don't use your hammer to screw in bolts. As a craftsman, you've learned the right time and place to use each tool. State management with React is a rugged tool belt, but not everyone has the prior experience to know which tool to reach for. This post will explain the past, present, and future of state management to help you make the correct decision for your team, project, or organization. Glossary Before we begin, it's critical you understand some of the terms commonly used. These aren't the canonical names. A few different variations of each float around, but the underlying ideas are the same: UI State – State used for controlling interactive parts of our application (e.g. dark mode toggle, modals). Server Cache State – State from the server, which we cache on the client-side for quick access (e.g. call an API, store the result, use it in multiple places). Form State – The many different states of a form (e.g. loading, submitting, disabled, validation, retrying). There's also controlled & uncontrolled form state. URL State – State managed by the browser (e.g. filter products, saving to query parameters, and refreshing the page to see the same products filtered) State Machine – An explicit model of your state over time (e.g. a stoplight goes from green → yellow → red, but never green → red)."
  },
  {
    "id": 5,
    "title": "How Stripe Designs Beautiful Websites",
    "date": "30 de maio de 2021",
    "subtitle": "Examining the tips and tricks used to make Stripe's website design a notch above the rest.",
    "body": "React was introduced in May 2013. Its paradigm shift was that your UI was a function of your state. Given some component state, React can determine what your component will look like. React is built upon the idea of state. However, state has long been one of the most difficult parts of building a React application. Let's imagine state management in React as a rugged tool belt. You've used this tool belt for years, slowly adding new tools as needed. Each tool serves a very specific purpose. You don't use your hammer to screw in bolts. As a craftsman, you've learned the right time and place to use each tool. State management with React is a rugged tool belt, but not everyone has the prior experience to know which tool to reach for. This post will explain the past, present, and future of state management to help you make the correct decision for your team, project, or organization. Glossary Before we begin, it's critical you understand some of the terms commonly used. These aren't the canonical names. A few different variations of each float around, but the underlying ideas are the same: UI State – State used for controlling interactive parts of our application (e.g. dark mode toggle, modals). Server Cache State – State from the server, which we cache on the client-side for quick access (e.g. call an API, store the result, use it in multiple places). Form State – The many different states of a form (e.g. loading, submitting, disabled, validation, retrying). There's also controlled & uncontrolled form state. URL State – State managed by the browser (e.g. filter products, saving to query parameters, and refreshing the page to see the same products filtered) State Machine – An explicit model of your state over time (e.g. a stoplight goes from green → yellow → red, but never green → red)."
  },
  {
    "id": 6,
    "title": "Past, Present, and Future of React State Management",
    "date": "29 de maio de 2021",
    "subtitle": "Learn about the history of state management in React and what the preferred solutions are today.",
    "body": "React was introduced in May 2013. Its paradigm shift was that your UI was a function of your state. Given some component state, React can determine what your component will look like. React is built upon the idea of state. However, state has long been one of the most difficult parts of building a React application. Let's imagine state management in React as a rugged tool belt. You've used this tool belt for years, slowly adding new tools as needed. Each tool serves a very specific purpose. You don't use your hammer to screw in bolts. As a craftsman, you've learned the right time and place to use each tool. State management with React is a rugged tool belt, but not everyone has the prior experience to know which tool to reach for. This post will explain the past, present, and future of state management to help you make the correct decision for your team, project, or organization. Glossary Before we begin, it's critical you understand some of the terms commonly used. These aren't the canonical names. A few different variations of each float around, but the underlying ideas are the same: UI State – State used for controlling interactive parts of our application (e.g. dark mode toggle, modals). Server Cache State – State from the server, which we cache on the client-side for quick access (e.g. call an API, store the result, use it in multiple places). Form State – The many different states of a form (e.g. loading, submitting, disabled, validation, retrying). There's also controlled & uncontrolled form state. URL State – State managed by the browser (e.g. filter products, saving to query parameters, and refreshing the page to see the same products filtered) State Machine – An explicit model of your state over time (e.g. a stoplight goes from green → yellow → red, but never green → red)."
  },
  {
    "id": 7,
    "title": "Creating a Monorepo with Lerna & Yarn Workspaces",
    "date": "27 de maio de 2021",
    "subtitle": "In this guide, you will learn how to create a Monorepo to manage multiple packages with a shared build, test, and release process.",
    "body": "React was introduced in May 2013. Its paradigm shift was that your UI was a function of your state. Given some component state, React can determine what your component will look like. React is built upon the idea of state. However, state has long been one of the most difficult parts of building a React application. Let's imagine state management in React as a rugged tool belt. You've used this tool belt for years, slowly adding new tools as needed. Each tool serves a very specific purpose. You don't use your hammer to screw in bolts. As a craftsman, you've learned the right time and place to use each tool. State management with React is a rugged tool belt, but not everyone has the prior experience to know which tool to reach for. This post will explain the past, present, and future of state management to help you make the correct decision for your team, project, or organization. Glossary Before we begin, it's critical you understand some of the terms commonly used. These aren't the canonical names. A few different variations of each float around, but the underlying ideas are the same: UI State – State used for controlling interactive parts of our application (e.g. dark mode toggle, modals). Server Cache State – State from the server, which we cache on the client-side for quick access (e.g. call an API, store the result, use it in multiple places). Form State – The many different states of a form (e.g. loading, submitting, disabled, validation, retrying). There's also controlled & uncontrolled form state. URL State – State managed by the browser (e.g. filter products, saving to query parameters, and refreshing the page to see the same products filtered) State Machine – An explicit model of your state over time (e.g. a stoplight goes from green → yellow → red, but never green → red)."
  },
  {
    "id": 8,
    "title": "How Stripe Designs Beautiful Websites",
    "date": "25 de maio de 2021",
    "subtitle": "Examining the tips and tricks used to make Stripe's website design a notch above the rest.",
    "body": "React was introduced in May 2013. Its paradigm shift was that your UI was a function of your state. Given some component state, React can determine what your component will look like. React is built upon the idea of state. However, state has long been one of the most difficult parts of building a React application. Let's imagine state management in React as a rugged tool belt. You've used this tool belt for years, slowly adding new tools as needed. Each tool serves a very specific purpose. You don't use your hammer to screw in bolts. As a craftsman, you've learned the right time and place to use each tool. State management with React is a rugged tool belt, but not everyone has the prior experience to know which tool to reach for. This post will explain the past, present, and future of state management to help you make the correct decision for your team, project, or organization. Glossary Before we begin, it's critical you understand some of the terms commonly used. These aren't the canonical names. A few different variations of each float around, but the underlying ideas are the same: UI State – State used for controlling interactive parts of our application (e.g. dark mode toggle, modals). Server Cache State – State from the server, which we cache on the client-side for quick access (e.g. call an API, store the result, use it in multiple places). Form State – The many different states of a form (e.g. loading, submitting, disabled, validation, retrying). There's also controlled & uncontrolled form state. URL State – State managed by the browser (e.g. filter products, saving to query parameters, and refreshing the page to see the same products filtered) State Machine – An explicit model of your state over time (e.g. a stoplight goes from green → yellow → red, but never green → red)."
  },
  {
    "id": 9,
    "title": "Past, Present, and Future of React State Management",
    "date": "20 de maio de 2021",
    "subtitle": "Learn about the history of state management in React and what the preferred solutions are today.",
    "body": "React was introduced in May 2013. Its paradigm shift was that your UI was a function of your state. Given some component state, React can determine what your component will look like. React is built upon the idea of state. However, state has long been one of the most difficult parts of building a React application. Let's imagine state management in React as a rugged tool belt. You've used this tool belt for years, slowly adding new tools as needed. Each tool serves a very specific purpose. You don't use your hammer to screw in bolts. As a craftsman, you've learned the right time and place to use each tool. State management with React is a rugged tool belt, but not everyone has the prior experience to know which tool to reach for. This post will explain the past, present, and future of state management to help you make the correct decision for your team, project, or organization. Glossary Before we begin, it's critical you understand some of the terms commonly used. These aren't the canonical names. A few different variations of each float around, but the underlying ideas are the same: UI State – State used for controlling interactive parts of our application (e.g. dark mode toggle, modals). Server Cache State – State from the server, which we cache on the client-side for quick access (e.g. call an API, store the result, use it in multiple places). Form State – The many different states of a form (e.g. loading, submitting, disabled, validation, retrying). There's also controlled & uncontrolled form state. URL State – State managed by the browser (e.g. filter products, saving to query parameters, and refreshing the page to see the same products filtered) State Machine – An explicit model of your state over time (e.g. a stoplight goes from green → yellow → red, but never green → red)."
  }
]